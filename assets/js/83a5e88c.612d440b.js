"use strict";(self.webpackChunkdsa_101=self.webpackChunkdsa_101||[]).push([[781],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(t),d=a,f=m["".concat(u,".").concat(d)]||m[d]||p[d]||i;return t?r.createElement(f,o(o({ref:n},c),{},{components:t})):r.createElement(f,o({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3041:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return v},default:function(){return N},frontMatter:function(){return b},metadata:function(){return y},toc:function(){return k}});var r=t(7462),a=t(3366),i=t(7294),o=t(3905),l=t(2389),u=t(9443);var s=function(){var e=(0,i.useContext)(u.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},c=t(3616),p=t(6010),m="tabItem_vU9c";function d(e){var n,t,a,o=e.lazy,l=e.block,u=e.defaultValue,d=e.values,f=e.groupId,g=e.className,h=i.Children.map(e.children,(function(e){if((0,i.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=d?d:h.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),v=(0,c.lx)(b,(function(e,n){return e.value===n.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===u?u:null!=(n=null!=u?u:null==(t=h.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(a=h[0])?void 0:a.props.value;if(null!==y&&!b.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=s(),w=k.tabGroupChoices,N=k.setTabGroupChoices,O=(0,i.useState)(y),C=O[0],T=O[1],E=[],D=(0,c.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var I=w[f];null!=I&&I!==C&&b.some((function(e){return e.value===I}))&&T(I)}var S=function(e){var n=e.currentTarget,t=E.indexOf(n),r=b[t].value;r!==C&&(D(n),T(r),null!=f&&N(f,r))},P=function(e){var n,t=null;switch(e.key){case"ArrowRight":var r=E.indexOf(e.currentTarget)+1;t=E[r]||E[0];break;case"ArrowLeft":var a=E.indexOf(e.currentTarget)-1;t=E[a]||E[E.length-1]}null==(n=t)||n.focus()};return i.createElement("div",{className:"tabs-container"},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":l},g)},b.map((function(e){var n=e.value,t=e.label,a=e.attributes;return i.createElement("li",(0,r.Z)({role:"tab",tabIndex:C===n?0:-1,"aria-selected":C===n,key:n,ref:function(e){return E.push(e)},onKeyDown:P,onFocus:S,onClick:S},a,{className:(0,p.Z)("tabs__item",m,null==a?void 0:a.className,{"tabs__item--active":C===n})}),null!=t?t:n)}))),o?(0,i.cloneElement)(h.filter((function(e){return e.props.value===C}))[0],{className:"margin-vert--md"}):i.createElement("div",{className:"margin-vert--md"},h.map((function(e,n){return(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==C})}))))}function f(e){var n=(0,l.Z)();return i.createElement(d,(0,r.Z)({key:String(n)},e))}var g=function(e){var n=e.children,t=e.hidden,r=e.className;return i.createElement("div",{role:"tabpanel",hidden:t,className:r},n)},h=["components"],b={sidebar_position:1},v="Longest Increasing Subsequence",y={unversionedId:"Dynamic Programming/Longest-Increasing-Sequence",id:"Dynamic Programming/Longest-Increasing-Sequence",title:"Longest Increasing Subsequence",description:"We are given an array with n numbers: a[0... n-1] . The task is to find the longest, strictly increasing, subsequence in a.",source:"@site/problems/Dynamic Programming/01-Longest-Increasing-Sequence.md",sourceDirName:"Dynamic Programming",slug:"/Dynamic Programming/Longest-Increasing-Sequence",permalink:"/DSA101/problems/Dynamic Programming/Longest-Increasing-Sequence",editUrl:"https://github.com/GDSCNITD/DSA101/tree/main/problems/problems/Dynamic Programming/01-Longest-Increasing-Sequence.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"problemsSidebar",previous:{title:"Median of Two Sorted Arrays",permalink:"/DSA101/problems/arrays/Median-of-2-sorted-arrays"}},k=[{value:"Problem",id:"problem",children:[{value:"Try this problem",id:"try-this-problem",children:[],level:3}],level:2},{value:"Solution in <code>O(nlogn)</code> using dynamic programming and Binary search",id:"solution-in-onlogn-using-dynamic-programming-and-binary-search",children:[],level:2},{value:"Output",id:"output",children:[],level:2}],w={toc:k};function N(e){var n=e.components,t=(0,a.Z)(e,h);return(0,o.kt)("wrapper",(0,r.Z)({},w,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"longest-increasing-subsequence"},"Longest Increasing Subsequence"),(0,o.kt)("p",null,"We are given an array with ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," numbers: ",(0,o.kt)("inlineCode",{parentName:"p"},"a[0... n-1]")," . The task is to find the longest, strictly increasing, subsequence in ",(0,o.kt)("inlineCode",{parentName:"p"},"a"),"."),(0,o.kt)("h2",{id:"problem"},"Problem"),(0,o.kt)("p",null,"We highly engage you to try questions which require the same concept before looking at the solution."),(0,o.kt)("h3",{id:"try-this-problem"},"Try this problem"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Codechef")," - ",(0,o.kt)("a",{parentName:"p",href:"https://www.codechef.com/problems/MERGEDLIS"},"https://www.codechef.com/problems/MERGEDLIS")),(0,o.kt)("details",null,(0,o.kt)("summary",null,"Click - to see solution"),(0,o.kt)("h2",{id:"solution-in-onlogn-using-dynamic-programming-and-binary-search"},"Solution in ",(0,o.kt)("inlineCode",{parentName:"h2"},"O(nlogn)")," using dynamic programming and Binary search"),(0,o.kt)("p",null,"We will use the dynamic programming array ",(0,o.kt)("inlineCode",{parentName:"p"},"d[0 ... n-1]"),". ",(0,o.kt)("inlineCode",{parentName:"p"},"d[i]")," will be the element at which a subsequence of length ",(0,o.kt)("inlineCode",{parentName:"p"},"i")," terminates. If there are multiple such sequences, then we take the one that ends in the smallest element."),(0,o.kt)("p",null,"Initially we assume ",(0,o.kt)("inlineCode",{parentName:"p"},"d[0] = \u2212\u221e")," and for all other elements ",(0,o.kt)("inlineCode",{parentName:"p"},"d[i] = \u221e"),"."),(0,o.kt)("p",null,"We will gradually process the numbers, first ",(0,o.kt)("inlineCode",{parentName:"p"},"a[0]"),", then ",(0,o.kt)("inlineCode",{parentName:"p"},"a[1]"),", etc, and in each step maintain the array ",(0,o.kt)("inlineCode",{parentName:"p"},"d[]")," so that it is up to date."),(0,o.kt)("p",null,"After processing all the elements of a[] the length of the desired subsequence is the largest ",(0,o.kt)("inlineCode",{parentName:"p"},"l")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"d[l] < \u221e"),"."),(0,o.kt)(f,{mdxType:"Tabs"},(0,o.kt)(g,{value:"cpp",label:"C++",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <vector>\nusing namespace std;\n\nint lis(vector<int> const& a){\n    int n = a.size();\n    const int INF = 1e9;\n    vector<int> d(n + 1, INF);\n    d[0] = -INF;\n    for (int i = 0; i < n; i++){\n        for (int j = 1; j <= n; j++){\n            if (d[j - 1] < a[i] && a[i] < d[j]){\n                d[j] = a[i];\n            }\n        }\n    }\n    int ans = 0;\n    for (int i = 0; i <= n; i++){\n        if (d[i] < INF) ans = i;\n    }\n    return ans;\n}\nint main(){\n    vector<int> a = {3, 2, 4, 5, 6, 9, 1};\n    cout << "Length of the longest increasing subsequence: ";\n    cout << lis(a);\n    return 0;\n}\n')))),(0,o.kt)("h2",{id:"output"},"Output"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt"},"Length of the longest increasing subsequence: 5\n"))))}N.isMDXComponent=!0}}]);